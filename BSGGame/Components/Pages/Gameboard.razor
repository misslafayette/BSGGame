@rendermode InteractiveServer
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using BSGGame.GameLogic;
@using BSGGame.GameLogic.Cards;
@using BSGGame.GameLogic.Cards.Core;
@using BSGGame.GameLogic.Cards.Daybreak;
@using BSGGame.GameLogic.Cards.Exodus;
@using BSGGame.GameLogic.Cards.Factories;
@using BSGGame.GameLogic.Cards.Pegasus;
@using static BSGGame.GameLogic.TurnPhase;
@page "/"

<h1>🚀 Game Board</h1>

<p><b>Current Turn:</b> @CurrentPlayer.Name's turn, @currentPhase phase</p>
<p>Select a location:</p>

<div class="grid grid-cols-3 gap-3">
    <button class="btn btn-primary">Command</button>
    <button class="btn btn-primary">Research Lab</button>
    <button class="btn btn-primary">Sickbay</button>
    <button class="btn btn-primary">Brig</button>
</div>

<div class="top-row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
    @foreach (var player in players)
    {
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">
                        @player.Name
                        @if (player == CurrentPlayer)
                        {
                            <span>⭐</span>
                        }
                    
                    </h5>
                    <p>HasDrawn: @player.HasDrawn</p>
                    <p class= "card-text">
                        Loyalty: <strong>@player.Loyalty</strong>
                    </p>
                    <button class="btn btn-purple" @onclick="() => DrawCardOfType(player, CardType.Tactics)">Draw Tactics</button>
                    <button class="btn btn-warning-flip" @onclick="() => DrawCardOfType(player, CardType.Politics)">Draw Politics</button>
                    <button class="btn btn-success-flip" @onclick="() => DrawCardOfType(player, CardType.Leadership)">Draw Leadership</button>
                    <button class="btn btn-info-flip" @onclick="() => DrawCardOfType(player, CardType.Engineering)">Draw Engineering</button>
                    <button class="btn btn-danger-flip" @onclick="() => DrawCardOfType(player, CardType.Piloting)">Draw Piloting</button>
                    <button class="btn btn-outline-dark" @onclick="AdvancePhase">Next Phase</button>

                    @if (player.Cards.Any())
                    {
                        var last = GetLastCard(player);

                        <p class="cards-drawn">
                            Drew: <span class="badge bg-info">@last?.Type</span> - <strong>@last?.Value</strong>
                        </p>

                        <div class="mt-3">
                            <h6>Hand:</h6>
                            <ul class="list-unstyled">
                                @foreach (var card in player.Cards)
                                {
                                    <li>
                                        <span class="badge bg-info">@card.Type</span> - <strong>@card.Value</strong>
                                    </li>
                                    <button class="btn btn-outline-primary" @onclick="() => DiscardCard(player,card)">Discard</button>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<div class="container mt-5">
    <h4>🗑 Discard Piles</h4>
    @foreach (var pair in discardPiles)
    {
        <h5>@pair.Key</h5>
        <ul>
            @foreach (var card in pair.Value)
            {
                <li>@card.Type - @card.Value</li>
            }
        </ul>
    }
</div>

@code {
    Dictionary<CardType, List<SkillCard>> decks = new();
    Dictionary<CardType, List<SkillCard>> discardPiles = new();
    List<Player> players = new();
    int currentPlayerIndex = 0;
    TurnPhase currentPhase = TurnPhase.Draw;
    Player CurrentPlayer => players[currentPlayerIndex];

    protected override void OnInitialized()
    {
        players.AddRange(new[]
        {
            new Player {Name = "Adama", Loyalty = Loyalty.Human},
            new Player {Name = "Boomer", Loyalty = Loyalty.Cylon},
            new Player {Name = "Starbuck", Loyalty = Loyalty.Human}
        });

        bool IncludeDaybreak = true;
        bool IncludeExodus = true;
        bool IncludePegasus = true;

        var baseDecks = CoreSkillCardFactory.BuildAllDecks();
        var daybreakDecks = DaybreakSkillCardFactory.BuildAllDecks();
        var exodusDecks = ExodusSkillCardFactory.BuildAllDecks();
        var pegasusDecks = PegasusSkillCardFactory.BuildAllDecks();

        foreach (CardType type in Enum.GetValues<CardType>())
        {
            decks[type] = new List<SkillCard>();
            discardPiles[type] = new List<SkillCard>();

            if (baseDecks.TryGetValue(type, out var coreCards))
                decks[type].AddRange(coreCards);

            if (IncludeDaybreak && daybreakDecks.TryGetValue(type, out var daybreakCards))
                decks[type].AddRange(daybreakCards);

            if (IncludeExodus && exodusDecks.TryGetValue(type, out var exodusCards))
                decks[type].AddRange(exodusCards);

            if (IncludePegasus && pegasusDecks.TryGetValue(type, out var pegasusCards))
                decks[type].AddRange(pegasusCards);
        }

        foreach (var deck in decks.Values)
        {
            deck.Shuffle();
        }
    }

    void DrawCardOfType(Player player, CardType type)
    {
        if (!decks.TryGetValue(type, out var deckForType))
            return;

        if (deckForType.Count == 0)
        {
            if (discardPiles.TryGetValue(type, out var pile) && pile.Count > 0)
            {
                // Shuffle discard pile
                pile.Shuffle();

                //Refill the deck
                deckForType.AddRange(pile);
                pile.Clear();

                Console.WriteLine($"Deck for {type} was empty. Shuffled discard pile back in.");
            }
        }

        //if still empty after shuffling, abort draw
        if (deckForType.Count == 0)
            return;

        var card = deckForType[0];
        deckForType.RemoveAt(0);

        player.Cards.Add(card);
        player.HasDrawn = true;

        Console.WriteLine($"Drew {card.Type} ({card.Value}) for {player.Name}");
        StateHasChanged();
    }

    void DiscardCard(Player player, SkillCard card)
    {
        if (player.Cards.Contains(card))
        {
            player.Cards.Remove(card);
            discardPiles[card.Type].Add(card);
        }

        StateHasChanged();
    }

    void AdvancePhase()
    {
        switch (currentPhase)
        {
            case TurnPhase.Draw:
                currentPhase = TurnPhase.Action;
                break;
            case TurnPhase.Action:
                currentPhase = TurnPhase.Crisis;
                break;
            case TurnPhase.Crisis:
                currentPhase = TurnPhase.End;
                break;
            case TurnPhase.End:
                AdvanceTurn();
                currentPhase = TurnPhase.Draw;
                break;
            default:
                currentPhase = TurnPhase.Draw;
                break;
        }

        StateHasChanged();
    }

    void AdvanceTurn()
    {
        currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
        CurrentPlayer.HasDrawn = false;
        StateHasChanged();
    }

    SkillCard? GetLastCard(Player player)
    {
        return player.Cards.LastOrDefault();
    }
}

<style>
    .btn-purple {
        background-color: #6f42c1;
        color: white;
        border: 1px solid #6f42c1;
        transition: 0.2s ease-in-out;
    }

        .btn-purple:hover {
            background-color: white;
            color: #6f42c1;
            border-color: #6f42c1;
        }

    .btn-warning-flip {
        background-color: #ffc107;
        color: black;
        border: 1px solid #ffc107;
        transition: 0.2s ease-in-out;
    }

        .btn-warning-flip:hover {
            background-color: white;
            color: #ffc107;
            border-color: #ffc107;
        }

    .btn-success-flip {
        background-color: #198754;
        color: white;
        border: 1px solid #198754;
        transition: 0.2s ease-in-out;
    }

        .btn-success-flip:hover {
            background-color: white;
            color: #198754;
            border-color: #198754;
        }

    .btn-info-flip {
        background-color: #0dcaf0;
        color: black;
        border: 1px solid #0dcaf0;
        transition: 0.2s ease-in-out;
    }

        .btn-info-flip:hover {
            background-color: white;
            color: #0dcaf0;
            border-color: #0dcaf0;
        }

    .btn-danger-flip {
        background-color: #dc3545;
        color: white;
        border: 1px solid #dc3545;
        transition: 0.2s ease-in-out;
    }

        .btn-danger-flip:hover {
            background-color: white;
            color: #dc3545;
            border-color: #dc3545;
        }
</style>